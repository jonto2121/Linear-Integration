name: Reusable Linear Integration

on:
  workflow_call:
    inputs:
      team_id:
        required: true
        type: string
        description: "The Linear team ID to create issues in"
    secrets:
      LINEAR_API_KEY:
        required: true

jobs:
  linear-integration:
    runs-on: ubuntu-latest
    steps:
      # Create issue when PR is opened
      - name: Create Linear Issue
        if: github.event.action == 'opened'
        shell: bash
        run: |
          # Extract PR info
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          REPO_NAME="${{ github.repository }}"
          
          echo "Creating Linear issue for PR #${PR_NUMBER}: ${PR_TITLE} in repository ${REPO_NAME}"
          
          # Format description (escape for JSON)
          DESCRIPTION="## GitHub PR Details\n**PR:** [#${PR_NUMBER}: ${PR_TITLE}](${PR_URL})\n**Repository:** ${REPO_NAME}\n**Author:** ${PR_AUTHOR}\n\n${PR_BODY}"
          
          # Get "In Progress" state ID for the team
          echo "Fetching workflow states for team ${{ inputs.team_id }}"
          STATES_QUERY=$(curl -s -X POST https://api.linear.app/graphql \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.LINEAR_API_KEY }}" \
            -d "{\"query\":\"{ workflowStates(filter: { team: { id: { eq: \\\"${{ inputs.team_id }}\\\" } } }) { nodes { id name type } } }\"}")
          
          # Extract the "In Progress" state ID
          IN_PROGRESS_STATE_ID=$(echo "$STATES_QUERY" | grep -o '"id":"[^"]*","name":"In Progress"' | head -1 | sed 's/"id":"//;s/","name":"In Progress"//')
          
          if [ -z "$IN_PROGRESS_STATE_ID" ]; then
            # Try to find any started state if "In Progress" isn't found
            IN_PROGRESS_STATE_ID=$(echo "$STATES_QUERY" | grep -o '"id":"[^"]*","name":"[^"]*","type":"started"' | head -1 | sed 's/.*"id":"//;s/","name.*//')
          fi
          
          echo "Found 'In Progress' state ID: $IN_PROGRESS_STATE_ID"
          
          # User mapping for assigning issues - use full UUID format
          # This is a centralized map of GitHub usernames to Linear user IDs
          # Format: "github_username:linear_user_uuid"
          USER_MAPPINGS="github_user1:linear_user_id1,github_user2:linear_user_id2"
          
          # Get Linear user ID from mapping
          LINEAR_USER_ID=""
          if [ ! -z "$USER_MAPPINGS" ]; then
            while IFS=',' read -ra MAPPINGS; do
              for mapping in "${MAPPINGS[@]}"; do
                github_user=$(echo $mapping | cut -d':' -f1)
                linear_user=$(echo $mapping | cut -d':' -f2)
                if [ "$github_user" = "$PR_AUTHOR" ]; then
                  LINEAR_USER_ID=$linear_user
                  break
                fi
              done
            done <<< "$USER_MAPPINGS"
          fi
          
          echo "GitHub user: $PR_AUTHOR, Linear user ID: ${LINEAR_USER_ID:-none}"
          
          # Build assignee parameter if user mapping was found
          ASSIGNEE_PARAM=""
          if [ ! -z "$LINEAR_USER_ID" ]; then
            ASSIGNEE_PARAM=", assigneeId: \\\"$LINEAR_USER_ID\\\""
          fi
          
          # Build state parameter if In Progress state was found
          STATE_PARAM=""
          if [ ! -z "$IN_PROGRESS_STATE_ID" ]; then
            STATE_PARAM=", stateId: \\\"$IN_PROGRESS_STATE_ID\\\""
          fi
          
          # Title format: PR Title [PR-Number] [Repo]
          ISSUE_TITLE="${PR_TITLE} [PR-${PR_NUMBER}] [${REPO_NAME}]"
          
          # Create Linear issue via API including state and assignee if available
          QUERY="{\"query\":\"mutation CreateIssue(\$title: String!, \$description: String!, \$teamId: String!) { issueCreate(input: { title: \$title, description: \$description, teamId: \$teamId$STATE_PARAM$ASSIGNEE_PARAM }) { success issue { id identifier url } } }\",\"variables\":{\"title\":\"${ISSUE_TITLE}\",\"description\":\"${DESCRIPTION}\",\"teamId\":\"${{ inputs.team_id }}\"}}"
          
          echo "Query: $QUERY"
          
          RESPONSE=$(curl -s -X POST https://api.linear.app/graphql \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.LINEAR_API_KEY }}" \
            -d "$QUERY")
          
          echo "Linear API response: $RESPONSE"
          
          # Extract issue identifier and URL using grep and sed
          ISSUE_IDENTIFIER=$(echo $RESPONSE | grep -o '"identifier":"[^"]*"' | sed 's/"identifier":"//;s/"//')
          ISSUE_URL=$(echo $RESPONSE | grep -o '"url":"[^"]*"' | sed 's/"url":"//;s/"//')
          
          if [ ! -z "$ISSUE_IDENTIFIER" ]; then
            echo "Linear issue created: $ISSUE_IDENTIFIER ($ISSUE_URL)"
            
            # Add comment to PR with issue info
            PR_COMMENT_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
            curl -s -X POST $PR_COMMENT_URL \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"body\":\"✅ Linear issue created: [${ISSUE_IDENTIFIER}](${ISSUE_URL})\"}"
          else
            echo "Failed to create Linear issue"
            exit 1
          fi

      # Update issue status when PR is merged
      - name: Update Linear Issue Status
        if: github.event.action == 'closed' && github.event.pull_request.merged == true
        shell: bash
        run: |
          echo "PR has been merged, updating Linear issue status"
          
          # Extract PR info
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
          
          # Get the ID of the "Done" state for your team
          echo "Fetching workflow states for team ${{ inputs.team_id }}"
          
          STATES_QUERY=$(curl -s -X POST https://api.linear.app/graphql \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.LINEAR_API_KEY }}" \
            -d "{\"query\":\"{ workflowStates(filter: { team: { id: { eq: \\\"${{ inputs.team_id }}\\\" } } }) { nodes { id name type } } }\"}")
          
          echo "Workflow states response: $STATES_QUERY"
          
          # Extract the "Done" state ID
          DONE_STATE_ID=$(echo "$STATES_QUERY" | grep -o '"id":"[^"]*","name":"Done"' | head -1 | sed 's/"id":"//;s/","name":"Done"//')
          
          echo "First attempt to find Done state ID: '$DONE_STATE_ID'"
          
          if [ -z "$DONE_STATE_ID" ]; then
            echo "Trying to find any completed state"
            # Try to find any completed state if "Done" isn't found
            DONE_STATE_ID=$(echo "$STATES_QUERY" | grep -o '"id":"[^"]*","name":"[^"]*","type":"completed"' | head -1 | sed 's/.*"id":"//;s/","name.*//')
            echo "Found completed state ID: '$DONE_STATE_ID'"
          fi
          
          if [ -z "$DONE_STATE_ID" ]; then
            echo "Could not find 'Done' state ID for your team"
            echo "Full workflow states data: $STATES_QUERY"
            exit 1
          fi
          
          echo "Found 'Done' state ID: $DONE_STATE_ID"
          
          # Find Linear issue by PR number marker and repository name in title
          echo "Finding Linear issue for PR #${PR_NUMBER} in ${REPO_NAME}"
          
          SEARCH_TERM="[PR-${PR_NUMBER}] [${REPO_NAME}]"
          echo "Searching for issues with title containing: $SEARCH_TERM"
          
          FIND_ISSUE=$(curl -s -X POST https://api.linear.app/graphql \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.LINEAR_API_KEY }}" \
            -d "{\"query\":\"query { issues(filter: { title: { containsIgnoreCase: \\\"${SEARCH_TERM}\\\" } }) { nodes { id identifier title } } }\"}")
          
          echo "Find issue response: $FIND_ISSUE"
          
          # Extract issue ID
          ISSUE_ID=$(echo "$FIND_ISSUE" | grep -o '"id":"[^"]*"' | head -1 | sed 's/"id":"//;s/"//')
          ISSUE_IDENTIFIER=$(echo "$FIND_ISSUE" | grep -o '"identifier":"[^"]*"' | head -1 | sed 's/"identifier":"//;s/"//')
          
          if [ -z "$ISSUE_ID" ]; then
            echo "Could not find Linear issue for PR #${PR_NUMBER} in ${REPO_NAME}"
            exit 1
          fi
          
          echo "Found Linear issue: $ISSUE_IDENTIFIER (ID: $ISSUE_ID)"
          
          # Update the Linear issue status to "Done"
          echo "Updating Linear issue $ISSUE_ID to state $DONE_STATE_ID"
          
          UPDATE_RESPONSE=$(curl -s -X POST https://api.linear.app/graphql \
            -H "Content-Type: application/json" \
            -H "Authorization: ${{ secrets.LINEAR_API_KEY }}" \
            -d "{\"query\":\"mutation UpdateIssue(\$issueId: String!, \$stateId: String!) { issueUpdate(id: \$issueId, input: { stateId: \$stateId }) { success issue { id identifier state { name } } } }\",\"variables\":{\"issueId\":\"${ISSUE_ID}\",\"stateId\":\"${DONE_STATE_ID}\"}}")
          
          echo "Update response: $UPDATE_RESPONSE"
          
          SUCCESS=$(echo "$UPDATE_RESPONSE" | grep -o '"success":true')
          if [ ! -z "$SUCCESS" ]; then
            echo "Successfully updated Linear issue status to Done"
            
            # Add comment to PR
            PR_COMMENT_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
            curl -s -X POST $PR_COMMENT_URL \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"body\":\"✅ Linear issue ${ISSUE_IDENTIFIER} marked as Done\"}"
          else
            echo "Failed to update Linear issue status"
            exit 1
          fi
